Test cases for the module 0-add_integer
=======================================

The 0-add_integer module takes two parameters, integers or floats and returns their sum

Usage
=====

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Testing two positive integers (a = 2 and b = 3)
    >>> add_integer(2, 3)
    5

Testing one positive and one negative integer (a = 5 and b = -3)
    >>> add_integer(5, -3)
    2

Testing two negative integers (a = -5 and b = -2)
    >>> add_integer(-5, -2)
    -7

Testing two integers with the second being the default value of b (a = 1 and b = 98)
    >>> add_integer(1)
    99

Testing a positive float and a positive integer (a = 5.5 and b = 5)
    >>> add_integer(5.5, 5)
    10

Testing a float and an integer with the integer equal to the default value of b (a = 1.5 and b = 98)
    >>> add_integer(1.5)
    99

Testing a positive float and a negative integer (a = 5.5 and b = -2)
	    >>> add_integer(5.5, -2)
	    3

Testing two negative floats (a = -5.5 and b = -2)
	    >>> add_integer(-5.5, -2)
	    -7

Testing an integer and a string (a = 4 and b = "Holberton")
    >>> add_integer(4, "Holberton")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing no parameter to the function
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Testing a number and a letter (a = 10 and b = 'x')
    >>> add_integer(10, 'x')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Testing two letters (a = 'x' and b = 'y')
    >>> add_integer('x', 'y')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Testing a tuple
    >>> add_integer((2, 3))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Testing a number and a list
    >>> add_integer(123, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing a only one string
    >>> add_integer("Hello")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Testing two float numbers (a = 1.2 and b = 4.2)
    >>> add_integer(2.2, 8.2)
    10

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN 1:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer

Case NaN 2:

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer

